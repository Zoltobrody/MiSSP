# Import PuLP modeler functions
from pulp import *
# Create the 'prob' variable to contain the problem data
prob = LpProblem("The_Rezystory_Problem",LpMaximize)

# Creating variables
x1=LpVariable("PradR1",0)
x2=LpVariable("PradR2",0)
x3=LpVariable("PradR3",0)
x4=LpVariable("PradR4",0)
x5=LpVariable("PradR5",0)


# The objective function is added to 'prob' first
prob += x3 , "Prad maksymalny "
# The  constraints are entered
prob += x1 <= 2, "ograniczenie i1"
prob += x2 <= 3, "ograniczenie i2"
prob += x3 <= 4, "ograniczenie i3"
prob += x4 <= 2, "ograniczenie i4"
prob += x5 <= 2, "ograniczenie i5"

prob += 8*x1 == 6*x2 , "rownanie_napieciowe_1_oczko"
prob += 10*x4 == 8*x5 , "rownanie_napieciowe_2_oczko"

prob += x1 + x2 == x3, "rownanie_prodowe_1"
prob += x4 + x5 == x3, "rownanie_prodowe_2"


# The problem data is written to an .lp file
prob.writeLP("ResistorModel.lp")

# The problem is solved using PuLP's choice of Solver
prob.solve()

# The status of the solution is printed to the screen
print ("Status:", LpStatus[prob.status])

# Each of the variables is printed with it's resolved optimum value
for v in prob.variables():
    print (v.name, "=", v.varValue)
# The optimised objective function value is printed to the screen
print ("Total current = ", value(prob.objective))

