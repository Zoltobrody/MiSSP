# Import PuLP modeler functions
from pulp import *
# Create the 'prob' variable to contain the problem data
prob = LpProblem("The_Whiskas_Problem",LpMinimize)

# The 2 variables Beef and Chicken are created with a lower limit of zero
x1=LpVariable("ChickenPercent",0,None,LpInteger)
x2=LpVariable("BeefPercent",0)
x3=LpVariable("vitaminBPercent",0)

# The objective function is added to 'prob' first
prob += 0.013*x1 + 0.008*x2 +0.01*x3, "Total Cost of Ingredients per can"
# The five constraints are entered
prob += x1 + x2 + x3  == 100, "PercentagesSum"
prob += 0.100*x1 + 0.200*x2 + 0.300*x3 >= 8.0, "ProteinRequirement"
prob += 0.080*x1 + 0.100*x2 + 0*x3 >= 6.0, "FatRequirement"
prob += 0.001*x1 + 0.005*x2 + 0*x3 <= 2.0, "FibreRequirement"
prob += 0.002*x1 + 0.005*x2 + 0.001*x3 <= 0.4, "SaltRequirement"
prob += 0.004*x1 + 0.0*x2 + 0.3*x3 <= 2.0, "VitaminBRequaierment"

# The problem data is written to an .lp file
prob.writeLP("WhiskasModel.lp")

# The problem is solved using PuLP's choice of Solver
prob.solve()

# The status of the solution is printed to the screen
print ("Status:", LpStatus[prob.status])

# Each of the variables is printed with it's resolved optimum value
for v in prob.variables():
    print (v.name, "=", v.varValue)
# The optimised objective function value is printed to the screen
print ("Total Cost of Ingredients per can = ", value(prob.objective))